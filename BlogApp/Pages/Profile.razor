@page "/profile"
@layout GeneralLayout
@using BlogApp.Models
@using MudBlazor
@using System.Net.Http.Headers
@using System.Text.Json
@inject UserData Data
@inject NavigationManager Navigation
@inject HttpClient http

<MudContainer MaxWidth="MaxWidth.Medium" Style="margin-top:30px" >
    <MudPaper Elevation="2" Class="container-1 p-6 rounded-2xl shadow-lg flex flex-wrap items-center">
       
        <MudGrid Gutter="true">
            <MudItem md="2">
                <MudContainer>
                    <ActivatorContent>
                        <MudAvatar Class="profile-avatar" Style="width:130px;height:130px">
                                                @(!string.IsNullOrEmpty(Data.Name) ? Data.Name[0].ToString().ToUpper() : "?")
                        </MudAvatar>
                    </ActivatorContent>
                </MudContainer>
            </MudItem>


            <MudItem md="5">
                <MudGrid Gutter="true">
                    <MudItem md="12">
                        <MudContainer>
                            <MudText Typo="Typo.h5" Class="font-bold">@Data.Name </MudText>
                            <MudText Typo="Typo.subtitle2" Class="text-gray-600 mt-2">
                                Tech Blogger & UI Enthusiast from India 🌏
                            </MudText>
                        </MudContainer>
                    </MudItem>
                    <MudItem md="4" Class="mb-2">
                        <MudContainer>
                            @* <MudButton Variant="Variant.Filled" Color="Color.Dark" Style="margin-left:30px;border-radius:16px;">Follow</MudButton> *@
                        </MudContainer>
                    </MudItem>
                    <MudItem md="8">
                        <MudContainer Class="mb-2">
                            <MudButton Variant="Variant.Filled" Color="Color.Dark" Style="border-radius:16px;">Edit Profile</MudButton>
                        </MudContainer>
                    </MudItem>
                </MudGrid>
            </MudItem>


            <MudItem md="5">
                <MudGrid Gutter="true" Class="followers-grid">
                    <MudItem xs="12" sm="4">
                        <MudContainer>
                            <MudText Typo="Typo.subtitle2" Class="text-gray-500">Followers</MudText>
                            <MudText Typo="Typo.h5" Class="font-bold">@followerCount</MudText>
                        </MudContainer>
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <MudContainer>
                            <MudText Typo="Typo.subtitle2" Class="text-gray-500">Following</MudText>
                            <MudText Typo="Typo.h5" Class="font-bold">@followingCount</MudText>
                        </MudContainer>
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <MudContainer>
                            <MudText Typo="Typo.subtitle2" Class="text-gray-500">Likes</MudText>
                            <MudText Typo="Typo.h5" Class="font-bold">548</MudText>
                        </MudContainer>
                    </MudItem>


                </MudGrid>

            </MudItem>

        </MudGrid>


    </MudPaper>

    <!-- Stats Grid -->
    <!-- Tabs Section -->
    <MudTabs Class="mt-8" Centered="true" Rounded="true">
        <MudTabPanel Text="Your Blogs">
            @if (myBlogs == null)
            {
                <p>Loading blogs...</p>
            }
            else if (myBlogs.Count == 0)
            {
                <p>No blogs found.</p>
            }
            else
            {
                @foreach (var blog in myBlogs)
                {

                    <MudContainer MaxWidth="MaxWidth.Medium" Class="my-4">
                        <MudPaper Class="rounded-l p-4 shadow hover:shadow-lg transition duration-300" @onclick="@(() => Navigation.NavigateTo($"/blog/{blog.Id}"))">
                            <MudGrid AlignItems="AlignItems.Center">

                                <!-- Left: Avatar + Email + Title + Subtitle -->
                                <MudItem xs="12" md="8">
                                    <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
                                        <ActivatorContent>
                                            <MudAvatar Class="profile-avatar">
                                                @(!string.IsNullOrEmpty(@blog.AuthorName) ? @blog.AuthorName[0].ToString().ToUpper() : "?")
                                            </MudAvatar>
                                        </ActivatorContent>
                                        <MudText Typo="Typo.subtitle2" Class="font-bold" Style="display: flex; align-items: center; gap: 6px;">
                                            @blog.AuthorName
                                            @if (blog.Visibility == "Private")
                                            {
                                                <MudTooltip Text="Private blog">
                                                    <MudIcon Icon="@Icons.Material.Filled.Lock" Size="Size.Small" Style="margin-left:30px" />
                                                </MudTooltip>
                                            }
                                        </MudText>
                                    </div>

                                <MudText Typo="Typo.h5" Class="font-bold">@blog.Title</MudText>
                                <MudText Typo="Typo.subtitle1">@blog.Subtitle</MudText>

                                <div style="display: flex; align-items: center; gap: 6px; margin-top: 8px;">
                                    <MudIcon Icon="@Icons.Material.Filled.CalendarToday" />
                                    <MudText Typo="Typo.body2">@blog.CreatedAt.ToString("MMM dd, yyyy")</MudText>
                                        <MudButton Variant="Variant.Filled" Style="margin-left:30px;border-radius:16px;" OnClick="@(() => Navigation.NavigateTo($"/editblog/{blog.Id}"))">Edit</MudButton>
                                        <MudButton Variant="Variant.Filled" Style="margin-left:30px;border-radius:16px;" OnClick="() => DeleteBlog(blog.Id)">Delete</MudButton>
                                </div>
                                </MudItem>

                                <!-- Right: Blog Image -->
                                <MudItem xs="12" md="4" Class="flex justify-center md:justify-end mt-2 md:mt-0">
                                @if (blog.ImageUrl != null && blog.ImageUrl.Length > 0)
                                {
                                    <MudImage ObjectFit="ObjectFit.Cover" Src="@blog.ImageUrl"
                                            Style="width: 250px; height: 160px;" />

                                }
                                </MudItem>

                            </MudGrid>
                        </MudPaper>
                    </MudContainer>
 

                }
            }
        </MudTabPanel>
        <MudTabPanel Text="Likes">
            <MudText Class="mt-4">Liked blogs show up here.</MudText>
        </MudTabPanel>
        
        <MudTabPanel Text="Followers">
            @if (followerCount == 0)
            {
                <MudText>No followers yet.</MudText>
            }
            else
            {
                @foreach (var f in Followers)
                {
                    <MudPaper Class="p-3 my-2 rounded-xl" Style="display: flex; align-items: center; gap: 12px;">
                        <MudAvatar Class="profile-avatar">
                            @(!string.IsNullOrEmpty(f) ? f[0].ToString().ToUpper() : "?")
                        </MudAvatar>
                        <MudText>@f</MudText>
                    </MudPaper>
                }
            }
        </MudTabPanel>

        <MudTabPanel Text="Following">
            @if (followingCount == 0)
            {
                <MudText>Not following anyone.</MudText>
            }
            else
            {
                @foreach (var f in Following)
                {
                    <MudPaper Class="p-3 my-2 rounded-xl" Style="display: flex; align-items: center; gap: 12px;">
                        <MudAvatar Class="profile-avatar">
                            @(!string.IsNullOrEmpty(f) ? f[0].ToString().ToUpper() : "?")
                        </MudAvatar>
                        <MudText>@f</MudText>
                    </MudPaper>

                }
            }
        </MudTabPanel>
    </MudTabs>


</MudContainer>

@code{

    [Inject]
    public IJSRuntime JS { get; set; } = default!;

    public List<string> Followers { get; set; } = new();
    public List<string> Following { get; set; } = new();
    private List<BlogEntry> myBlogs;

    private int followerCount = 0;
    private int followingCount = 0;

    protected override async Task OnInitializedAsync()
    {

        var jwt = await JS.InvokeAsync<string>("localStorage.getItem", "jwt");

        if (string.IsNullOrWhiteSpace(jwt))
        {
            Navigation.NavigateTo("/", forceLoad: true);
            return;
        }

        http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);

        var claims = DecodeJwtPayload(jwt);

        // Extract email and name from claims
        if (claims.TryGetValue("email", out var emailObj))
        {
            Data.Email = emailObj?.ToString();
            Data.Name = await http.GetStringAsync($"https://localhost:7193/api/Auth/getuser?email={Data.Email}");
        }

        
        if (string.IsNullOrWhiteSpace(Data.Name))
        {
            if (claims.TryGetValue("user_metadata", out var userMetaObj) && userMetaObj is JsonElement userMetaElement)
            {
                if (userMetaElement.TryGetProperty("name", out var nameElement))
                {
                    Data.Name = nameElement.GetString();
                }
            }
        }

        myBlogs = await http.GetFromJsonAsync<List<BlogEntry>>($"https://localhost:7193/api/Auth/getBlogs?email={Data.Email}");

        myBlogs = myBlogs
       .OrderByDescending(b => b.CreatedAt)
       .ToList();

        var statsResponse = await http.GetAsync($"https://localhost:7193/api/Auth/userstats?email={Data.Email}");
        if (statsResponse.IsSuccessStatusCode)
        {
            var json = await statsResponse.Content.ReadAsStringAsync();

            using var document = JsonDocument.Parse(json);
            var root = document.RootElement;

            // Deserialize lists
            Followers = root.GetProperty("followers").EnumerateArray()
                            .Select(f => f.GetString()).ToList();

            Following = root.GetProperty("following").EnumerateArray()
                            .Select(f => f.GetString()).ToList();

            // Get counts
            followerCount = root.GetProperty("followerCount").GetInt32();
            followingCount = root.GetProperty("followingCount").GetInt32();

        }
    }

    private async Task DeleteBlog(string blogId)
{
    var jwt = await JS.InvokeAsync<string>("localStorage.getItem", "jwt");
    http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);

    try
    {
        var response = await http.DeleteAsync($"https://localhost:7193/api/Auth/delete-blog/{blogId}");

        if (response.IsSuccessStatusCode)
        {
            // ✅ Efficient: Remove from local list without re-fetching
            var removed = myBlogs.RemoveAll(b => b.Id == blogId);
            if (removed > 0)
            {
                Console.WriteLine("✅ Blog removed from UI");
            }
            else
            {
                Console.WriteLine("⚠️ Blog not found in UI list");
            }
        }
        else
        {
            Console.WriteLine("❌ Blog deletion failed");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"❌ Error deleting blog: {ex.Message}");
    }
}


    private Dictionary<string, object> DecodeJwtPayload(string jwt)
    {
        var parts = jwt.Split('.');
        if (parts.Length != 3)
            throw new ArgumentException("Invalid JWT format");

        var payload = parts[1];
        // Pad if necessary for Base64 decoding
        int padding = 4 - (payload.Length % 4);
        if (padding < 4)
            payload += new string('=', padding);

        var bytes = Convert.FromBase64String(payload);
        var json = System.Text.Encoding.UTF8.GetString(bytes);

        return JsonSerializer.Deserialize<Dictionary<string, object>>(json)
               ?? new Dictionary<string, object>();
    }
}


<style>
    .followers-grid{
        margin-top:10px;
        display:flex;
        flex-direction:row;
        justify-content:center;
        align-items:center;
    }
    .container-1{
        padding:30px;
    }
</style>


